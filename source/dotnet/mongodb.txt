.. _dotnet-mongodb-data-access:

===================
MongoDB Data Access
===================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The following actions enable access to a linked MongoDB Atlas cluster
from a .NET application using the {+service-short+} .NET SDK.

.. include:: /includes/mongodb-data-access-query-filter-indeterminate-order-note.rst


Setup
-----

To work directly with the data in your MongoDB Atlas cluster, you first 
instantiate a :dotnet-sdk:`MongoClient <reference/Realms.Sync.MongoClient.html>` 
object, passing in the name of the atlas service in your Realm app. 
You then instantiate a 
:dotnet-sdk:`MongoClient.Database <reference/Realms.Sync.MongoClient.Database.html>`  and a 
:dotnet-sdk:`MongoClient.Collection <reference/Realms.Sync.MongoClient.Collection-1.html>` 
for each collection you want to work with.
The following code uses the default "mongodb-atlas" Atlas service name and 
creates a ``MongoClient.Collection`` for the "plants" collection in the 
"inventory" database:

.. literalinclude:: /examples/generated/code/start/MongoDBExamples.codeblock.mongo-setup.cs
   :language: csharp

.. _dotnet-mongodb-example-dataset:


Example Data
------------

.. include:: /includes/mongodb-data-access-example-plant-documents.rst

Mapping Classes
~~~~~~~~~~~~~~~
When working with objects in MongoDB, you should create .NET classes (POCOs) that 
correspond to the BSON objects. This allows you to serialize and deserialize 
the objects directly, rather than working with generic ``BsonDocument`` objects. 
In all of the examples on this page, we are using the following ``Plant`` mapping 
class for this purpose:

.. literalinclude:: /examples/generated/code/start/Plant.codeblock.plant-class.cs
   :language: csharp

.. note::
 
   For more information on using mapping classes, see 
   `Mapping Classes <https://mongodb.github.io/mongo-csharp-driver/2.11/reference/bson/mapping/>`_
   in the MongoDB .NET Driver documentation.

.. _dotnet-mongodb-create-documents:

Create Documents
----------------
To create a document in the MongoDB datastore, you instantiate the mapping class, 
and pass the new object to 
:dotnet-sdk:`InsertOneAsync() <reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_InsertOneAsync__0_>`. 
You can also create multiple documents 
and insert them in a single call by using 
:dotnet-sdk:`InsertManyAsync() <reference/reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_InsertManyAsync_System_Collections_Generic_IEnumerable__0__>`.

.. _dotnet-mongodb-insertOne:

Insert a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

You can insert a single document using
:dotnet-sdk:`InsertOneAsync() <reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_InsertOneAsync__0_>`. 

The following snippet inserts a single document describing a "Venus Flytrap" plant 
into our "plants" collection:

.. literalinclude:: /examples/generated/code/start/MongoDBExamples.codeblock.mongo-insert-one.cs
   :language: csharp

.. _dotnet-mongodb-insertMany:

Insert Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

You can insert multiple documents at the same time by using 
:dotnet-sdk:`InsertManyAsync() <reference/reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_InsertManyAsync_System_Collections_Generic_IEnumerable__0__>`.

The following snippet inserts four ``Plant`` objects into the "plants" collection
by instantiating the objects, adding them to a ``List<Plant>``, and passing that 
list to ``InsertManyAsync()``:

.. literalinclude:: /examples/generated/code/start/MongoDBExamples.codeblock.mongo-insert-many.cs
   :language: csharp

.. _dotnet-mongodb-read-documents:

Read Documents
--------------

To retrieve documents from the datastore, you create a ``BsonDocument`` filter 
that defines the properties you want to search on, and then pass that filter 
to either 
:dotnet-sdk:`FindOneAsync() <reference/reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_FindOneAsync_System_Object_System_Object_>`.
or
:dotnet-sdk:`FindAsync() <reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_FindAsync_System_Nullable_System_Int64__>`.
You can also get the count of all documents that match the filter by calling 
:dotnet-sdk:`CountAsync() <reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_CountAsync_System_Object_System_Nullable_System_Int64__>`.


.. _dotnet-mongodb-findOne:

Find a Single Document
~~~~~~~~~~~~~~~~~~~~~~
The following example shows how to find a plant where the "name" property is 
"petunia":

.. literalinclude:: /examples/generated/code/start/MongoDBExamples.codeblock.mongo-find-one.cs
   :language: csharp

.. _dotnet-mongodb-findMany:

Find Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~
The following example shows how to find all plants where the "type" property is 
"perennial":

.. literalinclude:: /examples/generated/code/start/MongoDBExamples.codeblock.mongo-find-many.cs
   :language: csharp


.. _dotnet-mongodb-count:

Count Documents in the Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The following example returns a count of all plants in the collection:

.. literalinclude:: /examples/generated/code/start/MongoDBExamples.codeblock.mongo-count.cs
   :language: csharp


Update Documents
----------------

To update an existing document in the MongoDB datastore, you create a 
``BsonDocument`` filter that defines the properties you want to search on, and 
then create a second ``BsonDocument`` that defines the properties you want to 
change. If you are updating only one document, you pass both ``BsonDocument``s to 
:dotnet-sdk:`UpdateOneAsync() <reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_UpdateOneAsync_System_Object_System_Object_System_Boolean_>`.
If you want to bulk update multiple documents, you call
:dotnet-sdk:`UpdateManyAsync() <reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_UpdateManyAsync_System_Object_System_Object_System_Boolean_>`.

.. _dotnet-mongodb-updateOne:

Update a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~
The following code finds the plant whose "name" property is "petunia" and changes 
its "sunlight" property to "partial":

.. literalinclude:: /examples/generated/code/start/MongoDBExamples.codeblock.mongo-update-one.cs
   :language: csharp

.. _dotnet-mongodb-updateMany:

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~
The following code finds all plants with a "_partition" value of "store 47" and 
changes them all to "area 51":

.. literalinclude:: /examples/generated/code/start/MongoDBExamples.codeblock.mongo-update-many.cs
   :language: csharp

.. _dotnet-mongodb-upsert:

Upsert Documents
~~~~~~~~~~~~~~~~
Both :dotnet-sdk:`UpdateOneAsync() <reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_UpdateOneAsync_System_Object_System_Object_System_Boolean_>` 
and 
:dotnet-sdk:`UpdateManyAsync() <reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_UpdateManyAsync_System_Object_System_Object_System_Boolean_>`
have an option Boolean property that specifies whether the update should be an 
upsert (that is, if the document doesn't exist, it should be created). By default,
no upsert is performed. 

The following example looks for a plant whose "name" property is 
"Pothos", "type" property is "perennial", and "sunlight" property is "full". 
If a plant matches these criteria, the method updates the plant's "_partition" 
value to "store 42". If no plant exists in the collection with that name, the 
method will create a new plant with all of the defined properties, including the 
update.  

.. literalinclude:: /examples/generated/code/start/MongoDBExamples.codeblock.mongo-upsert.cs
   :language: csharp

.. _dotnet-mongodb-delete-documents:

Delete Documents
----------------
The process for deleting documents is much the same as creating (or updating)
documents: you create a ``BsonDocument`` that defines the properties you want to 
match on, and then call either 
:dotnet-sdk:`DeleteOneAsync() <reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_DeleteOneAsync_System_Object_>`.
or
:dotnet-sdk:`DeleteManyAsync() <reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_DeleteManyAsync_System_Object_>`.


.. _dotnet-mongodb-deleteOne:

Delete a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~
The following example deletes the first document it finds with a "name" property 
value of "Thai Basil":

.. literalinclude:: /examples/generated/code/start/MongoDBExamples.codeblock.mongo-delete-one.cs
   :language: csharp

.. _dotnet-mongodb-deleteMany:

Delete Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~
The following example deletes all documents that have a "type" property value of 
"annual":

.. literalinclude:: /examples/generated/code/start/MongoDBExamples.codeblock.mongo-delete-many.cs
   :language: csharp

.. _dotnet-mongodb-aggregation-pipelines:

Aggregate Documents
-------------------


.. _dotnet-mongodb-aggregate:

Aggregate Documents in a Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. _dotnet-mongodb-aggregation-stages:

Aggregation Stages
------------------

.. include:: /includes/aggregation-stages.rst
